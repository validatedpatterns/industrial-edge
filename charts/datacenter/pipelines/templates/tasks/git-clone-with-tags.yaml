apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-with-tags
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
    description: configmap contents
  params:
  - name: url_configmapkey
    description: git url to clone
    type: string
  - name: revision
    description: git revision to checkout (branch, tag, sha, refâ€¦)
    type: string
    default: main
  - name: submodules
    description: defines if the resource should initialize and fetch the submodules
    type: string
    default: "true"
  - name: depth
    description: performs a shallow clone where only the most recent commit(s) will be fetched
    type: string
    default: "1"
  - name: sslVerify
    description: defines if http.sslVerify should be set to true or false in the global git config
    type: string
    default: "false"
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: ""
  - name: deleteExisting
    description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
    type: string
    default: "false"
  results:
  - name: commit
    description: The precise commit SHA that was fetched by this Task
  steps:
  - name: clone
    image: ghcr.io/tektoncd/github.com/tektoncd/pipeline/cmd/git-init:v0.44.5
    script: |
      CHECKOUT_DIR="$(workspaces.gitrepos.path)/$(params.subdirectory)"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      if [[ "$(params.deleteExisting)" == "true" ]] ; then
        cleandir
      fi

      /ko-app/git-init \
        -url "$(cat $(workspaces.config.path)/$(params.url_configmapkey))" \
        -revision "$(params.revision)" \
        -path "$CHECKOUT_DIR" \
        -sslVerify="$(params.sslVerify)" \
        -submodules="$(params.submodules)" \
        -depth="$(params.depth)"
      cd "$CHECKOUT_DIR"

      git fetch --tags
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
       exit $EXIT_CODE
      fi

      # Seems the go git client checks out master regardless.  This allows for 'main' or another branch to be used
      git checkout $(params.revision)
      git branch --set-upstream-to=origin/$(params.revision)

      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi

      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      # Make sure we don't add a trailing newline to the result!
      echo -n "$RESULT_SHA" > $(results.commit.path)
